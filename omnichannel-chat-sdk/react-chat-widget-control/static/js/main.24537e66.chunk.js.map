{"version":3,"sources":["utils/fetchOmnichannelConfig.ts","utils/fetchTelemetryConfig.ts","utils/fetchDebugConfig.ts","components/ChatWidget/ChatWidget.tsx","reportWebVitals.ts","index.tsx"],"names":["fetchOmnichannelConfig","omnichannelConfig","orgId","process","orgUrl","widgetId","urlParams","URLSearchParams","window","location","search","get","fetchTelemetryConfig","telemetryConfig","telemetry","disable","ariaTelemetryKey","fetchDebugConfig","debugConfig","console","log","quickButtons","label","value","ChatWidget","useState","chatSDK","setChatSDK","open","setOpen","hasChatStarted","setHasChatStarted","useEffect","a","OmnichannelChatSDK","setDebug","initialize","liveChatContext","localStorage","getItem","Object","keys","JSON","parse","length","setQuickButtons","init","handleNewUserMessage","newMessage","sendMessage","content","onWidgetClick","useCallback","event","isWidgetOpened","optionalParams","cachedLiveChatContext","startChat","getChatToken","chatToken","getCurrentLiveChatContext","setItem","stringify","onNewMessage","message","isSystemMessage","addResponseMessage","isCustomerMessage","fileMetadata","name","downloadFileAttachment","blob","fileReader","FileReader","readAsDataURL","onloadend","addUserMessage","result","rehydrate","endChat","removeItem","dropMessages","handleTextInputChange","sendTypingEvent","onClick","title","subtitle","handleQuickButtonClicked","fileSelector","document","createElement","setAttribute","click","onchange","file","target","files","uploadFileAttachment","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.24537e66.chunk.js","sourcesContent":["const fetchOmnichannelConfig = () => {\n  const omnichannelConfig = { // Default config\n    orgId: process.env.REACT_APP_orgId || '',\n    orgUrl: process.env.REACT_APP_orgUrl || '',\n    widgetId: process.env.REACT_APP_widgetId || ''\n  };\n\n  const urlParams = new URLSearchParams(window.location.search);\n\n  // Overrides default config if URL any param is found\n  if (urlParams.get('orgUrl') !== null) {\n    omnichannelConfig.orgUrl = urlParams.get('orgUrl')!;\n  }\n\n  if (urlParams.get('orgId') !== null) {\n    omnichannelConfig.orgId = urlParams.get('orgId')!;\n  }\n\n  if (urlParams.get('widgetId') !== null) {\n    omnichannelConfig.widgetId = urlParams.get('widgetId')!;\n  }\n\n  return omnichannelConfig;\n}\n\nexport default fetchOmnichannelConfig;","const fetchTelemetryConfig = () => {\n    const telemetryConfig = {\n        telemetry: {\n            disable: true,\n            ariaTelemetryKey: ''\n        }\n    };\n\n    const urlParams = new URLSearchParams(window.location.search);\n    if (urlParams.get('telemetry') !== null) {\n        telemetryConfig.telemetry.disable = urlParams.get('telemetry') == 'true'? false: true;\n    }\n\n    if (urlParams.get('ariaTelemetryKey') !== null) {\n        telemetryConfig.telemetry.ariaTelemetryKey = urlParams.get('ariaTelemetryKey') || '';\n    }\n\n    return telemetryConfig;\n}\n\nexport default fetchTelemetryConfig;","const fetchDebugConfig = () => {\n    const debugConfig = {\n        disable: true\n    }\n\n    const urlParams = new URLSearchParams(window.location.search);\n    if (urlParams.get('debug') !== null) {\n        debugConfig.disable = urlParams.get('debug') == 'true'? false: true;\n    }\n\n    return debugConfig;\n}\n\nexport default fetchDebugConfig;","import React, { useCallback, useEffect, useState } from 'react';\nimport { Widget, addResponseMessage, isWidgetOpened, dropMessages, addUserMessage, setQuickButtons } from 'react-chat-widget';\nimport {OmnichannelChatSDK, isCustomerMessage, isSystemMessage} from '@microsoft/omnichannel-chat-sdk';\nimport fetchOmnichannelConfig from '../../utils/fetchOmnichannelConfig';\nimport fetchTelemetryConfig from '../../utils/fetchTelemetryConfig';\nimport fetchDebugConfig from '../../utils/fetchDebugConfig';\nimport 'react-chat-widget/lib/styles.css';\n\nconst omnichannelConfig: any = fetchOmnichannelConfig();\nconst telemetryConfig: any = fetchTelemetryConfig();\nconst debugConfig: any = fetchDebugConfig();\n\nconsole.log(`%c [OmnichannelConfig]`, 'background-color:#001433;color:#fff');\nconsole.log(omnichannelConfig);\n\nconsole.log(`%c [telemetryConfig]`, 'background-color:#001433;color:#fff');\nconsole.log(telemetryConfig);\n\nconsole.log(`%c [debugConfig]`, 'background-color:#001433;color:#fff');\nconsole.log(debugConfig);\n\nconst quickButtons = [\n  {label: 'Attachment', value: 'Attachment'},\n]\n\nfunction ChatWidget() {\n  const [chatSDK, setChatSDK] = useState<OmnichannelChatSDK>();\n  const [open, setOpen] = useState<boolean>(false);\n  const [hasChatStarted, setHasChatStarted] = useState<boolean>(false);\n\n  useEffect(() => {\n    const init = async () => {\n      const chatSDK = new OmnichannelChatSDK(omnichannelConfig, {\n        ...telemetryConfig\n      });\n\n      chatSDK.setDebug(!debugConfig.disable);\n\n      await chatSDK.initialize();\n      setChatSDK(chatSDK);\n\n      const liveChatContext = localStorage.getItem('liveChatContext');\n      if (liveChatContext && Object.keys(JSON.parse(liveChatContext)).length > 0) {\n        console.log(\"[liveChatContext]\");\n        console.log(liveChatContext);\n      }\n\n      setQuickButtons(quickButtons);\n    }\n\n    init();\n  }, []);\n\n  const handleNewUserMessage = async (newMessage: any) => {\n    console.log(`New message incoming! ${newMessage}`);\n\n    await chatSDK?.sendMessage({\n      content: newMessage\n    });\n  };\n\n  const onWidgetClick = useCallback(async (event: any) => {\n    console.log('[onWidgetClick]');\n    const open = isWidgetOpened();\n    // console.log(`[isWidgetOpened] ${open}`);\n    // console.log(`[hasChatStarted] ${hasChatStarted}`);\n    setOpen(open);\n\n    if (!hasChatStarted && open) {\n      console.log(`[StartChat]`);\n\n      const optionalParams: any = {};\n\n      // Check for active conversation in cache\n      const cachedLiveChatContext = localStorage.getItem('liveChatContext');\n      if (cachedLiveChatContext && Object.keys(JSON.parse(cachedLiveChatContext)).length > 0) {\n        console.log(\"[liveChatContext]\");\n        optionalParams.liveChatContext = JSON.parse(cachedLiveChatContext);\n      }\n\n      await chatSDK?.startChat(optionalParams);\n\n      const chatToken = await chatSDK?.getChatToken();\n      console.log(`[chatToken]`);\n      console.log(chatToken);\n\n      // Cache current conversation context\n      const liveChatContext = await chatSDK?.getCurrentLiveChatContext();\n      localStorage.setItem('liveChatContext', JSON.stringify(liveChatContext));\n\n      chatSDK?.onNewMessage(async (message: any) => {\n        if (isSystemMessage(message)) {\n          addResponseMessage(message.content);\n        } else if (isCustomerMessage(message)) {\n          // Renders attachment\n          if (message.fileMetadata) {\n            console.log(`[onNewMessage][Attachment][User] ${message.fileMetadata.name}`);\n            const blob = await chatSDK?.downloadFileAttachment(message.fileMetadata);\n            const fileReader = new FileReader();\n            fileReader.readAsDataURL(blob as Blob);\n            fileReader.onloadend = () => {\n              addUserMessage(`![attachment](${fileReader.result})`);\n              return;\n            }\n          } else {\n            addUserMessage(message.content);\n          }\n        } else {\n          // Renders attachment\n          if (message.fileMetadata) {\n            console.log(`[onNewMessage][Attachment][Agent] ${message.fileMetadata.name}`);\n            const blob = await chatSDK?.downloadFileAttachment(message.fileMetadata);\n            const fileReader = new FileReader();\n            fileReader.readAsDataURL(blob as Blob);\n            fileReader.onloadend = () => {\n              addResponseMessage(`![attachment](${fileReader.result})`);\n              return;\n            }\n          } else {\n            addResponseMessage(message.content);\n          }\n        }\n      }, {\n        rehydrate: true\n      });\n\n      setHasChatStarted(true);\n    }\n\n    if (hasChatStarted && !open) {\n      console.log(`[CloseChat]`);\n      await chatSDK?.endChat();\n\n      // Clean up\n      localStorage.removeItem('liveChatContext');\n      dropMessages()\n      setHasChatStarted(false);\n    }\n  }, [hasChatStarted, chatSDK, open]);\n\n  const handleQuickButtonClicked = (value: string) => {\n    console.log('[handleQuickButtonClicked]');\n    if (value === 'Attachment') {\n      const fileSelector = document.createElement('input');\n      fileSelector.setAttribute('type', 'file');\n      fileSelector.click();\n      fileSelector.onchange = async (event: any) => {\n        const file = event.target.files[0];\n        console.log(file);\n        console.log('[UploadFileAttachment]');\n        chatSDK?.uploadFileAttachment(file);\n\n        const fileReader = new FileReader();\n        fileReader.readAsDataURL(file);\n        fileReader.onloadend = () => {\n          addUserMessage(`![attachment](${fileReader.result})`);\n        }\n      }\n    }\n  }\n\n  const handleTextInputChange = useCallback(async () => {\n    console.log('[sendTypingEvent]')\n    await chatSDK?.sendTypingEvent();\n  }, [chatSDK]);\n\n  return (\n    <div>\n      <h1> Omnichannel Chat SDK </h1>\n      <div onClick={onWidgetClick}>\n        <Widget\n          title='Live Chat'\n          subtitle='via omnichannel-sdk & react-chat-widget control'\n          handleNewUserMessage={handleNewUserMessage}\n          handleQuickButtonClicked={handleQuickButtonClicked}\n          handleTextInputChange={handleTextInputChange}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default ChatWidget;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport ChatWidget from './components/ChatWidget/ChatWidget';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChatWidget />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}