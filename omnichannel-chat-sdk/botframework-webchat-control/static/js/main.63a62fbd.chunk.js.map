{"version":3,"sources":["context/index.tsx","components/Loading/Loading.tsx","components/ChatButton/ChatButton.tsx","components/ChatHeader/ChatHeader.tsx","components/Calling/IncomingCall.tsx","components/Calling/Calling.tsx","components/ActionBar/ActionBar.tsx","components/WebChat/createCustomStore.ts","components/WebChat/createDataMaskingMiddleware.ts","components/WebChat/createActivityMiddleware.tsx","components/WebChat/createAvatarMiddleware.tsx","utils/fetchOmnichannelConfig.ts","utils/fetchTelemetryConfig.ts","utils/fetchCallingConfig.ts","utils/fetchDebugConfig.ts","components/WebChat/WebChat.tsx","reportWebVitals.ts","index.tsx"],"names":["ActionType","initialState","hasChatStarted","messages","isTyping","agentEndSessionEvent","isLoading","Reducer","state","action","type","SET_CHAT_STARTED","payload","SET_MESSAGES","SET_TYPING","SET_AGENT_END_SESSION_EVENT","SET_LOADING","Store","createContext","Provider","StateProvider","props","useReducer","dispatch","value","children","Loading","className","color","height","width","ChatButton","onClick","ChatHeader","title","IncomingCall","rejectCall","acceptVideoCall","acceptVoiceCall","adjustWebChatHeightInVideoCall","console","log","webChatTranscriptContainer","document","getElementsByClassName","remoteVideoContainer","getElementById","currentCallActionBar","newHeight","clientHeight","style","marginTop","adjustWebChatHeightIncomingCall","incomingCallContainer","adjustWebChatHeightInVoiceCall","adjustWebChatHeightNoCall","Calling","useState","incomingCall","setIncomingCall","inVideoCall","setInVideoCall","inVoiceCall","setInVoiceCall","isMicrophoneMuted","setIsMicrophoneMuted","setIsRemoteVideoEnabled","isLocalVideoEnabled","setIsLocalVideoEnabled","useEffect","a","VoiceVideoCallingSDK","OCClient","chatToken","initialize","selfVideoHTMLElementId","remoteVideoHTMLElementId","environment","error","onCallAdded","onCallDisconnected","onLocalVideoStreamAdded","isRemoteVideoEnabled","onLocalVideoStreamRemoved","onRemoteVideoStreamAdded","onRemoteVideoStreamRemoved","init","useCallback","acceptCall","withVideo","toggleVideoButton","toggleLocalVideo","toggleMuteButton","toggleMute","stopCallButton","stopCall","id","ActionBar","isDownloadFocused","setIsDownloadFocused","isEmailTranscriptFocused","setIsEmailTranscriptFocused","onMouseEnterDownload","onMouseLeaveDownload","onMouseEnterEmailTranscript","onMouseLeaveEmailTranscript","size","onDownloadClick","onMouseEnter","onMouseLeave","onEmailTranscriptClick","CustomStore","middlewares","this","name","middleware","createStore","next","nextAction","Object","keys","currentMiddleware","applicable","result","apply","dispatchAction","_instance","createCustomStore","getInstance","DataMaskingMiddleware","dataMaskingRules","text","length","applyDataMasking","values","maskingRule","regex","RegExp","match","exec","replaceStr","replace","createDataMaskingMiddleware","chatConfig","createActivityMiddleware","card","activity","channelData","tags","includes","undefined","from","role","getInitial","initials","split","reduce","response","word","slice","substring","toUpperCase","createAvatarMiddleware","fromUser","fetchOmnichannelConfig","omnichannelConfig","orgId","process","orgUrl","widgetId","urlParams","URLSearchParams","window","location","search","get","fetchTelemetryConfig","telemetryConfig","telemetry","disable","ariaTelemetryKey","fetchCallingConfig","callingConfig","fetchDebugConfig","debugConfig","activityMiddleware","avatarMiddleware","styleOptions","bubbleBorderRadius","bubbleNubSize","bubbleNubOffset","bubbleFromUserBorderRadius","bubbleFromUserNubSize","bubbleFromUserNubOffset","bubbleFromUserBackground","WebChat","useContext","chatSDK","setChatSDK","preChatSurvey","setPreChatSurvey","preChatResponse","setPreChatResponse","chatAdapter","setChatAdapter","webChatStore","setWebChatStore","setChatToken","setVoiceVideoCallingSDK","OmnichannelChatSDK","setDebug","liveChatContext","localStorage","getItem","JSON","parse","getVoiceVideoCalling","VoiceVideoCalling","getPreChatSurvey","info","adaptiveCard","replaceAll","onNewMessage","message","content","onTypingEvent","onAgentEndSession","startChat","_","optionalParams","getDataMaskingRules","store","create","subscribe","cachedLiveChatContext","getCurrentLiveChatContext","setItem","stringify","rehydrate","createChatAdapter","getChatToken","endChat","close","removeItem","downloadTranscript","getLiveChatTranscript","transcript","emailTranscript","transcriptBody","emailAddress","attachmentMessage","locale","emailLiveChatTranscript","renderPreChatSurvey","AdaptiveCards","onExecuteAction","data","renderedCard","render","ref","n","firstChild","removeChild","appendChild","userID","directLine","sendTypingIndicator","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.63a62fbd.chunk.js","sourcesContent":["import React, {createContext, useReducer, Context} from 'react';\n\nenum ActionType {\n  SET_CHAT_STARTED,\n  SET_MESSAGES,\n  SET_TYPING,\n  SET_AGENT_END_SESSION_EVENT,\n  SET_LOADING\n}\n\ninterface IState {\n  hasChatStarted: boolean,\n  messages: any[],\n  isTyping: boolean,\n  agentEndSessionEvent: boolean,\n  isLoading: boolean\n}\n\ninterface StoreContext {\n  state: IState,\n  dispatch: React.Dispatch<any>\n}\n\nconst initialState = {\n  hasChatStarted: false,\n  messages: [] as any,\n  isTyping: false,\n  agentEndSessionEvent: false,\n  isLoading: false\n};\n\nconst Reducer = (state: any, action: any) => {\n  switch (action.type) {\n    case ActionType.SET_CHAT_STARTED:\n      return {\n        ...state,\n        type: action.type,\n        hasChatStarted: action.payload\n      }\n    case ActionType.SET_MESSAGES:\n      return {\n        ...state,\n        type: action.type,\n        messages: action.payload\n      };\n    case ActionType.SET_TYPING:\n      return {\n        ...state,\n        type: action.type,\n        isTyping: action.payload\n      }\n    case ActionType.SET_AGENT_END_SESSION_EVENT:\n      return {\n        ...state,\n        type: action.type,\n        agentEndSessionEvent: action.payload\n      }\n    case ActionType.SET_LOADING:\n      return {\n        ...state,\n        type: action.type,\n        isLoading: action.payload\n      }\n    default:\n      return state;\n  }\n};\n\nconst Store:Context<StoreContext> = createContext({} as StoreContext);\nconst { Provider } = Store;\n\nconst StateProvider = (props: { children: React.ReactNode; }) => {\n  const [state, dispatch] = useReducer(Reducer, initialState);\n  return <Provider value={{state, dispatch} as any}>{props.children}</Provider>;\n}\n\nexport {\n  Store,\n  StateProvider,\n  ActionType\n}","import Loader from 'react-loader-spinner';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport './Loading.css';\n\nfunction Loading () {\n    return (\n        <div className=\"loading\">\n            <Loader\n                type=\"Puff\"\n                color=\"#00BFFF\"\n                height={100}\n                width={100}\n            />\n        </div>\n    );\n}\n\nexport default Loading;","import React from \"react\";\nimport { MessageCircle } from \"react-feather\";\nimport './ChatButton.css';\n\ninterface ChatButtonProps {\n  onClick: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void\n}\n\nfunction ChatButton(props: ChatButtonProps) {\n  return (\n    <div className=\"chat-button\" onClick={props.onClick}>\n      <MessageCircle color='white' />\n    </div>\n  );\n}\n\nexport default ChatButton;","import React from \"react\";\nimport { X } from \"react-feather\";\nimport './ChatHeader.css';\n\ninterface ChatHeaderProps {\n  title: string;\n  onClick: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n}\n\nfunction ChatHeader(props: ChatHeaderProps) {\n  return (\n    <div className=\"chat-header\">\n    <span> {props.title} </span>\n      <div onClick={props.onClick}>\n        <X />\n      </div>\n    </div>\n  );\n}\n\nexport default ChatHeader;","import React from \"react\";\nimport { PhoneOff, Video, Phone } from \"react-feather\";\nimport './IncomingCall.css';\n\ninterface IncomingCallProps {\n  rejectCall: (event: React.MouseEvent<SVGAElement, MouseEvent>) => void;\n  acceptVideoCall: (event: React.MouseEvent<SVGAElement, MouseEvent>) => void;\n  acceptVoiceCall: (event: React.MouseEvent<SVGAElement, MouseEvent>) => void;\n}\n\nfunction IncomingCall(props: IncomingCallProps) {\n  return (\n    <div className=\"incoming-call-pop-up\">\n      <span> Incoming call </span>\n      <div>\n        <PhoneOff className=\"reject-call-button\" onClick={props.rejectCall}/>\n        <Video className=\"accept-video-call-button\" onClick={props.acceptVideoCall} />\n        <Phone className=\"accept-voice-call-button\" onClick={props.acceptVoiceCall}/>\n      </div>\n    </div>\n  )\n}\n\nexport default IncomingCall;","import React, { useCallback, useEffect, useState } from 'react';\nimport { Mic, MicOff, PhoneOff, Video, VideoOff } from 'react-feather';\nimport IncomingCall from './IncomingCall';\nimport './Calling.css';\n\ninterface CallingProps {\n  VoiceVideoCallingSDK: any;\n  OCClient: any;\n  chatToken: any;\n}\n\nconst adjustWebChatHeightInVideoCall = () => {\n  console.log(`[WebChat][adjustWebChatHeightInVideoCall]`);\n  const webChatTranscriptContainer = document.getElementsByClassName('webchat__basic-transcript')[0] as HTMLElement;\n  const remoteVideoContainer = document.getElementById('remoteVideo') as HTMLElement;\n  const currentCallActionBar = document.getElementsByClassName('current-call-action-bar')[0] as HTMLElement;\n\n  const newHeight = webChatTranscriptContainer.clientHeight - remoteVideoContainer.clientHeight - currentCallActionBar.clientHeight;\n  webChatTranscriptContainer.style.marginTop = `${remoteVideoContainer.clientHeight + currentCallActionBar.clientHeight}px`;\n  webChatTranscriptContainer.style.height = `${newHeight}px`;\n}\n\nconst adjustWebChatHeightIncomingCall = () => {\n  console.log(`[WebChat][adjustWebChatHeightIncomingCall]`);\n  const webChatTranscriptContainer = document.getElementsByClassName('webchat__basic-transcript')[0] as HTMLElement;\n  const incomingCallContainer = document.getElementsByClassName('incoming-call-pop-up')[0] as HTMLElement;\n\n  const newHeight = webChatTranscriptContainer.clientHeight - incomingCallContainer.clientHeight;\n  webChatTranscriptContainer.style.height = `${newHeight}px`;\n}\n\nconst adjustWebChatHeightInVoiceCall = () => {\n  console.log(`[WebChat][adjustWebChatHeightInVoiceCall]`);\n  const webChatTranscriptContainer = document.getElementsByClassName('webchat__basic-transcript')[0] as HTMLElement;\n  const currentCallActionBar = document.getElementsByClassName('current-call-action-bar')[0] as HTMLElement;\n\n  const newHeight = webChatTranscriptContainer.clientHeight - currentCallActionBar.clientHeight;\n  webChatTranscriptContainer.style.marginTop = `${currentCallActionBar.clientHeight}px`;\n  webChatTranscriptContainer.style.height = `${newHeight}px`;\n}\n\nconst adjustWebChatHeightNoCall = () => {\n  console.log(`[WebChat][adjustWebChatHeightNoCall]`);\n  const webChatTranscriptContainer = document.getElementsByClassName('webchat__basic-transcript')[0] as HTMLElement;\n  webChatTranscriptContainer.style.marginTop = '';\n  webChatTranscriptContainer.style.height = '';\n}\n\nfunction Calling(props: CallingProps) {\n  const [incomingCall, setIncomingCall] = useState(false);\n  const [inVideoCall, setInVideoCall] = useState(false);\n  const [inVoiceCall, setInVoiceCall] = useState(false);\n  const [isMicrophoneMuted, setIsMicrophoneMuted] = useState(false);\n  const [isRemoteVideoEnabled, setIsRemoteVideoEnabled] = useState(false);\n  const [isLocalVideoEnabled, setIsLocalVideoEnabled] = useState(false);\n\n  useEffect(() => {\n    const init = async () => {\n      const {VoiceVideoCallingSDK, OCClient, chatToken} = props;\n\n      try {\n        await VoiceVideoCallingSDK.initialize({\n          chatToken,\n          selfVideoHTMLElementId: 'selfVideo',\n          remoteVideoHTMLElementId: 'remoteVideo',\n          environment: 'test',\n          OCClient: OCClient\n        });\n        console.log(\"[WebChat][Calling] VoiceVideoCallingProxy initialized!\");\n        console.log(VoiceVideoCallingSDK);\n      } catch (e) {\n        console.error(\"[WebChat][Calling] Failed to initialize VoiceVideoCalling!\");\n        console.error(e);\n      }\n\n      VoiceVideoCallingSDK.onCallAdded(() => {\n        console.log('[WebChat][Calling][CallAdded]');\n        setIncomingCall(true);\n        adjustWebChatHeightIncomingCall();\n      });\n\n      VoiceVideoCallingSDK.onCallDisconnected(() => {\n        console.log('[WebChat][Calling][CallDisconnected]');\n        adjustWebChatHeightNoCall();\n\n        setIncomingCall(false);\n        setInVideoCall(false);\n        setInVoiceCall(false);\n      });\n\n      VoiceVideoCallingSDK.onLocalVideoStreamAdded(() => {\n        console.log('[WebChat][Calling][LocalVideoStreamAdded]');\n\n        const isMicrophoneMuted = VoiceVideoCallingSDK.isMicrophoneMuted();\n        setIsMicrophoneMuted(isMicrophoneMuted);\n\n        const isRemoteVideoEnabled = VoiceVideoCallingSDK.isRemoteVideoEnabled();\n        setIsRemoteVideoEnabled(isRemoteVideoEnabled);\n\n        const isLocalVideoEnabled = VoiceVideoCallingSDK.isLocalVideoEnabled();\n        setIsLocalVideoEnabled(isLocalVideoEnabled);\n\n        // No video stream available at this point, voice call\n        if (!isLocalVideoEnabled && !isRemoteVideoEnabled) {\n          setIncomingCall(false);\n          setInVideoCall(false);\n          setInVoiceCall(true);\n        } else {\n          setIncomingCall(false);\n          setInVideoCall(true);\n          setInVoiceCall(false);\n        }\n      });\n\n      VoiceVideoCallingSDK.onLocalVideoStreamRemoved(() => {\n        console.log('[WebChat][Calling][LocalVideoStreamRemoved]');\n\n        const isMicrophoneMuted = VoiceVideoCallingSDK.isMicrophoneMuted();\n        setIsMicrophoneMuted(isMicrophoneMuted);\n\n        const isRemoteVideoEnabled = VoiceVideoCallingSDK.isRemoteVideoEnabled();\n        setIsRemoteVideoEnabled(isRemoteVideoEnabled);\n\n        const isLocalVideoEnabled = VoiceVideoCallingSDK.isLocalVideoEnabled();\n        setIsLocalVideoEnabled(isLocalVideoEnabled);\n\n        // No video stream available at this point, voice call\n        if (!isLocalVideoEnabled && !isRemoteVideoEnabled) {\n          setIncomingCall(false);\n          setInVideoCall(false);\n          setInVoiceCall(true);\n        } else {\n          setIncomingCall(false);\n          setInVideoCall(true);\n          setInVoiceCall(false);\n        }\n      });\n\n      VoiceVideoCallingSDK.onRemoteVideoStreamAdded(() => {\n        console.log('[WebChat][Calling][RemoteVideoStreamAdded]');\n\n        const isMicrophoneMuted = VoiceVideoCallingSDK.isMicrophoneMuted();\n        setIsMicrophoneMuted(isMicrophoneMuted);\n\n        const isRemoteVideoEnabled = VoiceVideoCallingSDK.isRemoteVideoEnabled();\n        setIsRemoteVideoEnabled(isRemoteVideoEnabled);\n\n        const isLocalVideoEnabled = VoiceVideoCallingSDK.isLocalVideoEnabled();\n        setIsLocalVideoEnabled(isLocalVideoEnabled);\n\n        // No video stream available at this point, voice call\n        if (!isLocalVideoEnabled && !isRemoteVideoEnabled) {\n          setIncomingCall(false);\n          setInVideoCall(false);\n          setInVoiceCall(true);\n        } else {\n          setIncomingCall(false);\n          setInVideoCall(true);\n          setInVoiceCall(false);\n        }\n      });\n\n      VoiceVideoCallingSDK.onRemoteVideoStreamRemoved(() => {\n        console.log('[WebChat][Calling][RemoteVideoStreamRemoved]');\n\n        const isMicrophoneMuted = VoiceVideoCallingSDK.isMicrophoneMuted();\n        setIsMicrophoneMuted(isMicrophoneMuted);\n\n        const isRemoteVideoEnabled = VoiceVideoCallingSDK.isRemoteVideoEnabled();\n        setIsRemoteVideoEnabled(isRemoteVideoEnabled);\n\n        const isLocalVideoEnabled = VoiceVideoCallingSDK.isLocalVideoEnabled();\n        setIsLocalVideoEnabled(isLocalVideoEnabled);\n\n        // No video stream available at this point, voice call\n        if (!isLocalVideoEnabled && !isRemoteVideoEnabled) {\n          setIncomingCall(false);\n          setInVideoCall(false);\n          setInVoiceCall(true);\n        } else {\n          setIncomingCall(false);\n          setInVideoCall(true);\n          setInVoiceCall(false);\n        }\n      });\n    }\n\n    init();\n  }, [props]);\n\n  const acceptVoiceCall = useCallback(async () => {\n    console.log(`[WebChat][Calling][Accept][Voice]`);\n    const {VoiceVideoCallingSDK} = props;\n\n    await VoiceVideoCallingSDK.acceptCall({\n      withVideo: false\n    });\n\n    setIncomingCall(false);\n    setInVideoCall(false);\n    setInVoiceCall(true);\n\n    adjustWebChatHeightInVoiceCall();\n\n    const isMicrophoneMuted = VoiceVideoCallingSDK.isMicrophoneMuted();\n    setIsMicrophoneMuted(isMicrophoneMuted);\n\n    const isRemoteVideoEnabled = VoiceVideoCallingSDK.isRemoteVideoEnabled();\n    setIsRemoteVideoEnabled(isRemoteVideoEnabled);\n\n    const isLocalVideoEnabled = VoiceVideoCallingSDK.isLocalVideoEnabled();\n    setIsLocalVideoEnabled(isLocalVideoEnabled);\n  }, [props]);\n\n  const acceptVideoCall = useCallback(async () => {\n    console.log(`[WebChat][Calling][Accept][Video]`);\n    const {VoiceVideoCallingSDK} = props;\n\n    await VoiceVideoCallingSDK.acceptCall({\n      withVideo: true\n    });\n\n    setIncomingCall(false);\n    setInVideoCall(true);\n    setInVoiceCall(false);\n\n    adjustWebChatHeightInVideoCall();\n\n    const isMicrophoneMuted = VoiceVideoCallingSDK.isMicrophoneMuted();\n    setIsMicrophoneMuted(isMicrophoneMuted);\n\n    const isRemoteVideoEnabled = VoiceVideoCallingSDK.isRemoteVideoEnabled();\n    setIsRemoteVideoEnabled(isRemoteVideoEnabled);\n\n    const isLocalVideoEnabled = VoiceVideoCallingSDK.isLocalVideoEnabled();\n    setIsLocalVideoEnabled(isLocalVideoEnabled);\n  }, [props]);\n\n  const rejectCall = useCallback(async () => {\n    console.log(`[WebChat][Calling][Reject]`);\n    const {VoiceVideoCallingSDK} = props;\n    await VoiceVideoCallingSDK.rejectCall();\n\n    setIncomingCall(false);\n    setInVideoCall(false);\n    setInVoiceCall(false);\n  }, [props]);\n\n  const toggleVideoButton = useCallback(async () => {\n    console.log(`[WebChat][Calling][toggleLocalVideo]`);\n    const {VoiceVideoCallingSDK} = props;\n    await VoiceVideoCallingSDK.toggleLocalVideo();\n\n    const isMicrophoneMuted = VoiceVideoCallingSDK.isMicrophoneMuted();\n    setIsMicrophoneMuted(isMicrophoneMuted);\n\n    const isRemoteVideoEnabled = VoiceVideoCallingSDK.isRemoteVideoEnabled();\n    setIsRemoteVideoEnabled(isRemoteVideoEnabled);\n\n    const isLocalVideoEnabled = VoiceVideoCallingSDK.isLocalVideoEnabled();\n    setIsLocalVideoEnabled(isLocalVideoEnabled);\n\n    // No video stream available at this point, voice call\n    if (!isLocalVideoEnabled && !isRemoteVideoEnabled) {\n      setIncomingCall(false);\n      setInVideoCall(false);\n      setInVoiceCall(true);\n    } else {\n      setIncomingCall(false);\n      setInVideoCall(true);\n      setInVoiceCall(false);\n    }\n  }, [props]);\n\n  const toggleMuteButton = useCallback(async () => {\n    console.log(`[WebChat][Calling][toggleMute]`);\n    const {VoiceVideoCallingSDK} = props;\n    await VoiceVideoCallingSDK.toggleMute();\n\n    const isMicrophoneMuted = VoiceVideoCallingSDK.isMicrophoneMuted();\n    setIsMicrophoneMuted(isMicrophoneMuted);\n\n    const isRemoteVideoEnabled = VoiceVideoCallingSDK.isRemoteVideoEnabled();\n    setIsRemoteVideoEnabled(isRemoteVideoEnabled);\n\n    const isLocalVideoEnabled = VoiceVideoCallingSDK.isLocalVideoEnabled();\n    setIsLocalVideoEnabled(isLocalVideoEnabled);\n\n    // No video stream available at this point, voice call\n    if (!isLocalVideoEnabled && !isRemoteVideoEnabled) {\n      setIncomingCall(false);\n      setInVideoCall(false);\n      setInVoiceCall(true);\n    } else {\n      setIncomingCall(false);\n      setInVideoCall(true);\n      setInVoiceCall(false);\n    }\n  }, [props]);\n\n  const stopCallButton = useCallback(async () => {\n    console.log(`[WebChat][Calling][stopCall]`);\n    const {VoiceVideoCallingSDK} = props;\n    await VoiceVideoCallingSDK.stopCall();\n  }, [props]);\n\n  const renderToggleVideoButton = () => {\n    if (!isLocalVideoEnabled) {\n      return <VideoOff className=\"toggle-video-button\" onClick={toggleVideoButton}/>\n    }\n    return <Video className=\"toggle-video-button\" onClick={toggleVideoButton}/>\n  }\n\n  const renderToggleMuteButton = () => {\n    if (isMicrophoneMuted) {\n      return <MicOff className=\"toggle-mute-button\" onClick={toggleMuteButton}/>\n    }\n    return <Mic className=\"toggle-mute-button\" onClick={toggleMuteButton}/>\n  }\n\n  return (\n    <>\n      {\n        incomingCall && <IncomingCall\n          rejectCall={rejectCall}\n          acceptVideoCall={acceptVideoCall}\n          acceptVoiceCall={acceptVoiceCall}\n        />\n      }\n      {\n        <div className={`calling ${inVideoCall || inVoiceCall? 'active': ''}`}>\n          <div className={`video-container ${inVideoCall? 'active': ''}`}>\n            <div id=\"remoteVideo\"></div>\n            <div id=\"selfVideo\"></div>\n          </div>\n          <div>\n            {\n              (inVideoCall || inVoiceCall) && <div className=\"current-call-action-bar\">\n                {renderToggleVideoButton()}\n                {renderToggleMuteButton()}\n                <PhoneOff className=\"stop-call-button\" onClick={stopCallButton}/>\n              </div>\n            }\n          </div>\n        </div>\n      }\n    </>\n  )\n}\n\nexport default Calling;","import React, { useCallback, useState } from \"react\";\nimport { Download, Mail } from \"react-feather\";\nimport './ActionBar.css';\n\ninterface ActionBarProps {\n  onDownloadClick: (event: React.MouseEvent<SVGAElement, MouseEvent>) => void\n  onEmailTranscriptClick: (event: React.MouseEvent<SVGAElement, MouseEvent>) => void\n}\n\nfunction ActionBar (props: ActionBarProps) {\n  const [isDownloadFocused, setIsDownloadFocused] = useState(false);\n  const [isEmailTranscriptFocused, setIsEmailTranscriptFocused] = useState(false);\n\n  const onMouseEnterDownload = useCallback(() => {\n    setIsDownloadFocused(true);\n  }, []);\n\n  const onMouseLeaveDownload = useCallback(() => {\n    setIsDownloadFocused(false);\n  }, []);\n\n  const onMouseEnterEmailTranscript = useCallback(() => {\n    setIsEmailTranscriptFocused(true);\n  }, []);\n\n  const onMouseLeaveEmailTranscript = useCallback(() => {\n    setIsEmailTranscriptFocused(false);\n  }, []);\n\n  return (\n    <div className=\"action-bar\">\n      <Download\n        size={'16'}\n        color={isDownloadFocused? 'rgb(22, 27, 34)': 'rgb(22, 27, 34, 0.5)'}\n        className='download-button'\n        onClick={props.onDownloadClick}\n        onMouseEnter={onMouseEnterDownload}\n        onMouseLeave={onMouseLeaveDownload}\n      />\n      <Mail\n        size={'16'}\n        color={isEmailTranscriptFocused? 'rgb(22, 27, 34)': 'rgb(22, 27, 34, 0.5)'}\n        className='email-button'\n        onClick={props.onEmailTranscriptClick}\n        onMouseEnter={onMouseEnterEmailTranscript}\n        onMouseLeave={onMouseLeaveEmailTranscript}\n      />\n    </div>\n  );\n}\n\nexport default ActionBar;","import {createStore} from 'botframework-webchat';\nimport {IMiddlewareCollection} from '../../interfaces/IMiddlewareCollection';\nimport {IWebChatMiddleware} from '../../interfaces/IWebChatMiddleware';\n\nclass CustomStore {\n    private static _instance: CustomStore;\n    private middlewares: IMiddlewareCollection;\n\n    private constructor() {\n        this.middlewares = {};\n    }\n\n    public static getInstance(): CustomStore {\n        if (!this._instance) {\n            this._instance = new CustomStore();\n        }\n        return this._instance;\n    }\n\n    // Add new middlewares\n    public subscribe(name: string, middleware: IWebChatMiddleware): void {\n        this.middlewares[name] = middleware;\n    }\n\n    public create() {\n        console.log(`[CustomStore][create]`);\n        return createStore(\n            {}, // initial state\n            ({ dispatch }: any) => (next: any) => (action: any) => {\n                // console.log(`[Store] ${action.type}`);\n                let nextAction = action;\n                if (action && action.payload) {\n                    for (const name of Object.keys(this.middlewares)) {\n                        const currentMiddleware = this.middlewares[name];\n                        // Apply middleware if applicable\n                        if (currentMiddleware.applicable(nextAction)) {\n                            const result = currentMiddleware.apply(nextAction);\n                            if (result.dispatchAction) {\n                                dispatch(result.dispatchAction);\n                            }\n                            if (result.nextAction) {\n                                nextAction = result.nextAction;\n                            }\n                        }\n                    }\n                }\n                return next(nextAction);\n            }\n        );\n    }\n}\n\nconst createCustomStore = () => {\n    console.log(`[createCustomStore]`);\n    const store = CustomStore.getInstance();\n    return store;\n};\n\nexport default createCustomStore;","import { IResultAction } from \"../../interfaces/IResultAction\";\nimport { IWebChatAction } from \"../../interfaces/IWebChatAction\";\nimport { IWebChatMiddleware } from \"../../interfaces/IWebChatMiddleware\";\n\nexport interface IDataMaskingRule {\n    [key: string]: string;\n}\n\nexport interface IDataMaskingSetting {\n    msdyn_maskforcustomer: boolean;\n    msdyn_maskforagent: boolean;\n}\n\nexport interface IDataMaskingInfo {\n    dataMaskingRules: IDataMaskingRule;\n    setting: IDataMaskingSetting;\n}\n\nclass DataMaskingMiddleware implements IWebChatMiddleware {\n    private dataMaskingRules: any;\n\n    public constructor (dataMaskingRules: any) {\n        // console.log(`[DataMaskingMiddleware][constructor]`);\n        this.dataMaskingRules = dataMaskingRules;\n\n        console.log(`[DataMaskingRules]`);\n        console.log(this.dataMaskingRules);\n    }\n\n    public applicable(action: any): boolean {\n        // console.log(`[DataMaskingMiddleware][applicable]`);\n        const { text } = action.payload;\n        if (Object.keys(this.dataMaskingRules).length > 0 && text && action.type === \"WEB_CHAT/SEND_MESSAGE\") {\n            return true;\n        }\n        return false;\n    }\n\n    public apply(action: any): IResultAction {\n        // console.log('[DataMaskingMiddleware][apply]');\n        let _nextAction = this.applyDataMasking(action);\n        return {\n            dispatchAction: null,\n            nextAction: _nextAction\n        };\n    }\n\n    private applyDataMasking(action: any): IWebChatAction {\n        const maskingCharacter = '#';\n        let {text} = action.payload;\n        if (Object.keys(this.dataMaskingRules).length > 0) {\n            for (const maskingRule of Object.values(this.dataMaskingRules)) {\n                const regex = new RegExp(maskingRule as string, 'g');\n                let match;\n                while (match = regex.exec(text)) {\n                    const replaceStr = match[0].replace(/./g, maskingCharacter);\n                    text = text.replace(match[0], replaceStr);\n                }\n            }\n        }\n\n        action.payload.text = text;\n        return action;\n    }\n}\n\nconst createDataMaskingMiddleware = (chatConfig: any) => {\n    console.log('[createDataMaskingMiddleware]');\n    return new DataMaskingMiddleware(chatConfig);\n};\n\nexport {\n    createDataMaskingMiddleware\n}\n","const createActivityMiddleware = () => {\n    console.log('[createActivityMiddleware]');\n\n    // Middleware to customize default activity behavior\n    const activityMiddleware = () => (next: any) => (card: any) => {\n        console.log(`%c [ActivityMiddleware]`, 'background: #2a9fd4; color: #fff');\n        console.log(card);\n\n        if (card.activity) {\n\n            // System message\n            if (card.activity.channelData && card.activity.channelData.tags &&\n                card.activity.channelData.tags.includes('system')) {\n                console.log(`%c [ActivityMiddleware][Message][System] ${card.activity.text}`, 'background: #2a9fd4; color: #fff');\n                return (children: any) => (\n                    <div key={card.activity.id} className='system-message'>\n                        {next(card)(children)}\n                    </div>\n                );\n            }\n\n            if (card.activity.text === undefined || card.activity.text == null) {\n                return next(card);\n            }\n\n            // Agent message\n            if (card.activity.from.role === 'bot') {\n                console.log(`%c [ActivityMiddleware][Message][Agent] ${card.activity.text}`, 'background: #2a9fd4; color: #fff');\n            }\n\n            // Customer message\n            if (card.activity.from.role === 'user') {\n                console.log(`%c [ActivityMiddleware][Message][Customer] ${card.activity.text}`, 'background: #2a9fd4; color: #fff');\n            }\n        }\n\n        return next(card); // Default Behavior\n    }\n\n    return activityMiddleware;\n}\n\nexport default createActivityMiddleware;","import { AlertCircle } from \"react-feather\";\n\nconst getInitial = (text: string): string => {\n    if (text) {\n        const initials = text.split(/\\s/).reduce((response, word) => response += word.slice(0, 1), '');\n        if (initials.length > 1) {\n            return initials.substring(0, 2).toUpperCase();\n        } else {\n            return text.substring(0, 2).toUpperCase();\n        }\n    }\n    return \"\";\n}\n\nconst createAvatarMiddleware = () => {\n    console.log('[createAvatarMiddleware]');\n\n    // Middleware to display avatar\n    const avatarMiddleware = () => (next: any) => (card: any) => {\n        console.log(`[AvatarMiddleware]`);\n        const {\n            activity: {\n                channelData: {\n                    tags\n                },\n                from: {\n                    name\n                },\n                text\n            },\n            fromUser\n        } = card;\n\n        console.log(card);\n        // System message\n        if (tags && tags.includes('system')) {\n            console.log(`[AvatarMiddleware][Message][System] ${text}`);\n\n            // Display alert icon\n            return (\n                <div>\n                    <AlertCircle color='red' size={20}/>\n                </div>\n            )\n        }\n\n        if (fromUser === undefined || fromUser === null) {\n            return false; // Do not display avatar on unknown message\n        }\n\n        // Display avatar on agent/customer messages\n\n        // Agent message\n        if (!fromUser) {\n            console.log(`[AvatarMiddleware][Message][Agent] ${text}`);\n            return (\n                <div className='webchat__avatar'>\n                    <p className='webchat__avatar_initials'> {getInitial(name)} </p>\n                </div>\n            )\n        }\n\n        // Customer message\n        if (fromUser) {\n            console.log(`[AvatarMiddleware][Message][Customer] ${text}`);\n            return (\n                <div className='webchat__avatar'>\n                    <p className='webchat__avatar_initials'> {getInitial(name) || 'CU'}  </p>\n                </div>\n            )\n        }\n\n        return next(card); // Default Behavior\n    }\n\n    return avatarMiddleware;\n}\n\nexport default createAvatarMiddleware;","const fetchOmnichannelConfig = () => {\n  const omnichannelConfig = { // Default config\n    orgId: process.env.REACT_APP_orgId || '',\n    orgUrl: process.env.REACT_APP_orgUrl || '',\n    widgetId: process.env.REACT_APP_widgetId || ''\n  };\n\n  const urlParams = new URLSearchParams(window.location.search);\n\n  // Overrides default config if URL any param is found\n  if (urlParams.get('orgUrl') !== null) {\n    omnichannelConfig.orgUrl = urlParams.get('orgUrl')!;\n  }\n\n  if (urlParams.get('orgId') !== null) {\n    omnichannelConfig.orgId = urlParams.get('orgId')!;\n  }\n\n  if (urlParams.get('widgetId') !== null) {\n    omnichannelConfig.widgetId = urlParams.get('widgetId')!;\n  }\n\n  return omnichannelConfig;\n}\n\nexport default fetchOmnichannelConfig;","const fetchTelemetryConfig = () => {\n    const telemetryConfig = {\n        telemetry: {\n            disable: true,\n            ariaTelemetryKey: ''\n        }\n    };\n\n    const urlParams = new URLSearchParams(window.location.search);\n    if (urlParams.get('telemetry') !== null) {\n        telemetryConfig.telemetry.disable = urlParams.get('telemetry') == 'true'? false: true;\n    }\n\n    if (urlParams.get('ariaTelemetryKey') !== null) {\n        telemetryConfig.telemetry.ariaTelemetryKey = urlParams.get('ariaTelemetryKey') || '';\n    }\n\n    return telemetryConfig;\n}\n\nexport default fetchTelemetryConfig;","const fetchCallingConfig = () => {\n    const callingConfig = {\n        disable: true\n    }\n\n    const urlParams = new URLSearchParams(window.location.search);\n    if (urlParams.get('calling') !== null) {\n        callingConfig.disable = urlParams.get('calling') == 'false'? true: false;\n    }\n\n    return callingConfig;\n}\n\nexport default fetchCallingConfig;","const fetchDebugConfig = () => {\n    const debugConfig = {\n        disable: true\n    }\n\n    const urlParams = new URLSearchParams(window.location.search);\n    if (urlParams.get('debug') !== null) {\n        debugConfig.disable = urlParams.get('debug') == 'true'? false: true;\n    }\n\n    return debugConfig;\n}\n\nexport default fetchDebugConfig;","import React, { useCallback, useEffect, useState, useContext } from 'react';\nimport ReactWebChat from 'botframework-webchat';\nimport { IRawMessage, OmnichannelChatSDK } from '@microsoft/omnichannel-chat-sdk';\nimport IChatTranscriptBody from '@microsoft/omnichannel-chat-sdk/lib/core/IChatTranscriptBody';\nimport { ActionType, Store } from '../../context';\nimport Loading from '../Loading/Loading';\nimport ChatButton from '../ChatButton/ChatButton';\nimport ChatHeader from '../ChatHeader/ChatHeader';\nimport Calling from '../Calling/Calling';\nimport ActionBar from '../ActionBar/ActionBar';\nimport createCustomStore from './createCustomStore';\nimport { createDataMaskingMiddleware } from './createDataMaskingMiddleware';\nimport createActivityMiddleware from './createActivityMiddleware';\nimport createAvatarMiddleware from './createAvatarMiddleware';\nimport fetchOmnichannelConfig from '../../utils/fetchOmnichannelConfig';\nimport fetchTelemetryConfig from '../../utils/fetchTelemetryConfig';\nimport fetchCallingConfig from '../../utils/fetchCallingConfig';\nimport fetchDebugConfig from '../../utils/fetchDebugConfig';\nimport * as AdaptiveCards from 'adaptivecards';\nimport './WebChat.css';\n\nconst omnichannelConfig: any = fetchOmnichannelConfig();\nconst telemetryConfig: any = fetchTelemetryConfig();\nconst callingConfig: any = fetchCallingConfig();\nconst debugConfig: any = fetchDebugConfig();\n\nconsole.log(`%c [OmnichannelConfig]`, 'background-color:#001433;color:#fff');\nconsole.log(omnichannelConfig);\n\nconsole.log(`%c [telemetryConfig]`, 'background-color:#001433;color:#fff');\nconsole.log(telemetryConfig);\n\nconsole.log(`%c [callingConfig]`, 'background-color:#001433;color:#fff');\nconsole.log(callingConfig);\n\nconsole.log(`%c [debugConfig]`, 'background-color:#001433;color:#fff');\nconsole.log(debugConfig);\n\nconst activityMiddleware: any = createActivityMiddleware();\nconst avatarMiddleware: any = createAvatarMiddleware();\nconst styleOptions = {\n  bubbleBorderRadius: 10,\n  bubbleNubSize: 10,\n  bubbleNubOffset: 15,\n\n  bubbleFromUserBorderRadius: 10,\n  bubbleFromUserNubSize: 10,\n  bubbleFromUserNubOffset: 15,\n  bubbleFromUserBackground: 'rgb(246, 246, 246)'\n}\n\nconst patchAdaptiveCard = (adaptiveCard: any) => {\n  return JSON.parse(adaptiveCard.replaceAll(\"&#42;\", \"*\"));  // HTML entities '&#42;' is not unescaped for some reason\n}\n\nfunction WebChat() {\n  const {state, dispatch} = useContext(Store);\n  const [chatSDK, setChatSDK] = useState<OmnichannelChatSDK>();\n  const [preChatSurvey, setPreChatSurvey] = useState(undefined);\n  const [preChatResponse, setPreChatResponse] = useState(undefined);\n  const [chatAdapter, setChatAdapter] = useState<any>(undefined);\n  const [webChatStore, setWebChatStore] = useState(undefined);\n  const [chatToken, setChatToken] = useState(undefined);\n  const [VoiceVideoCallingSDK, setVoiceVideoCallingSDK] = useState(undefined);\n\n  useEffect(() => {\n    const init = async () => {\n      const chatSDK = new OmnichannelChatSDK(omnichannelConfig, {\n        ...telemetryConfig\n      });\n\n      chatSDK.setDebug(!debugConfig.disable);\n\n      await chatSDK.initialize();\n      setChatSDK(chatSDK);\n\n      const liveChatContext = localStorage.getItem('liveChatContext');\n      if (liveChatContext && Object.keys(JSON.parse(liveChatContext)).length > 0) {\n        console.log(\"[liveChatContext]\");\n        console.log(liveChatContext);\n      }\n\n      if ((chatSDK as any).getVoiceVideoCalling && !callingConfig.disable) {\n        try {\n          const VoiceVideoCalling = await (chatSDK as any).getVoiceVideoCalling();\n          VoiceVideoCalling.setDebug(true);\n          setVoiceVideoCallingSDK(VoiceVideoCalling);\n          console.log(\"VoiceVideoCalling loaded\");\n        } catch (e) {\n          console.log(`Failed to load VoiceVideoCalling: ${e}`);\n        }\n      }\n\n      let preChatSurvey = await chatSDK.getPreChatSurvey(false);\n      if (preChatSurvey) {\n        console.info('[PreChatSurvey]');\n        preChatSurvey = patchAdaptiveCard(preChatSurvey);\n        console.log(preChatSurvey);\n        setPreChatSurvey(preChatSurvey);\n      }\n    }\n\n    console.log(state);\n    init();\n  }, []);\n\n  const onNewMessage = useCallback((message: IRawMessage) => {\n    console.log(`[onNewMessage] ${message.content}`);\n    dispatch({type: ActionType.SET_LOADING, payload: false});\n  }, [dispatch]);\n\n  const onTypingEvent = useCallback(() => {\n    console.log(`[onTypingEvent]`);\n  }, []);\n\n  const onAgentEndSession = useCallback(() => {\n    console.log(`[onAgentEndSession]`);\n  }, []);\n\n  const startChat = useCallback(async (_, optionalParams = {}) => {\n    if (state.hasChatStarted) {\n      return;\n    }\n\n    console.log('[startChat]');\n\n    const dataMaskingRules = await chatSDK?.getDataMaskingRules();\n    const store = createCustomStore();\n    setWebChatStore(store.create());\n\n    store.subscribe('DataMasking', createDataMaskingMiddleware(dataMaskingRules));\n\n    // Check for active conversation in cache\n    const cachedLiveChatContext = localStorage.getItem('liveChatContext');\n    if (cachedLiveChatContext && Object.keys(JSON.parse(cachedLiveChatContext)).length > 0) {\n      console.log(\"[liveChatContext]\");\n      optionalParams.liveChatContext = JSON.parse(cachedLiveChatContext);\n    }\n\n    dispatch({type: ActionType.SET_CHAT_STARTED, payload: true});\n\n    // Start chats only if there's an existing live chat context or no PreChat\n    if (cachedLiveChatContext || !preChatSurvey) {\n      dispatch({type: ActionType.SET_LOADING, payload: true});\n\n      try {\n        await chatSDK?.startChat(optionalParams);\n      } catch (error) {\n        console.log(`Unable to start chat: ${error.message}`);\n        return;\n      }\n\n      // Cache current conversation context\n      const liveChatContext = await chatSDK?.getCurrentLiveChatContext();\n      if (liveChatContext && Object.keys(liveChatContext).length) {\n        localStorage.setItem('liveChatContext', JSON.stringify(liveChatContext));\n      }\n\n      chatSDK?.onNewMessage(onNewMessage, {rehydrate: true});\n      chatSDK?.onTypingEvent(onTypingEvent);\n      chatSDK?.onAgentEndSession(onAgentEndSession);\n\n      const chatAdapter = await chatSDK?.createChatAdapter();\n\n      setChatAdapter(chatAdapter);\n      dispatch({type: ActionType.SET_LOADING, payload: false});\n\n      if ((chatSDK as any)?.getVoiceVideoCalling) {\n        const chatToken: any = await chatSDK?.getChatToken();\n        setChatToken(chatToken);\n      }\n    }\n  }, [chatSDK, state, dispatch, onAgentEndSession, onNewMessage, onTypingEvent, preChatSurvey]);\n\n  const endChat = useCallback(async () => {\n    console.log('[endChat]');\n    await chatSDK?.endChat();\n\n    // Clean up\n    (VoiceVideoCallingSDK as any)?.close();\n    setChatAdapter(undefined);\n    setChatToken(undefined);\n    setPreChatSurvey(undefined);\n    setPreChatResponse(undefined);\n    localStorage.removeItem('liveChatContext');\n    dispatch({type: ActionType.SET_CHAT_STARTED, payload: false});\n  }, [chatSDK, dispatch, VoiceVideoCallingSDK]);\n\n  const downloadTranscript = useCallback(async () => {\n    console.log('[downloadTranscript]');\n    const transcript = await chatSDK?.getLiveChatTranscript();\n    console.log(transcript);\n  }, [chatSDK]);\n\n  const emailTranscript = useCallback(async () => {\n    console.log('[emailTranscript]');\n    const transcriptBody: IChatTranscriptBody = {\n      emailAddress: process.env.REACT_APP_email as string,\n      attachmentMessage: 'Transcript',\n      locale: 'en'\n    }\n    await chatSDK?.emailLiveChatTranscript(transcriptBody);\n  }, [chatSDK]);\n\n  const renderPreChatSurvey = useCallback(() => {\n    const adaptiveCard = new AdaptiveCards.AdaptiveCard();\n    adaptiveCard.parse(preChatSurvey);\n    adaptiveCard.onExecuteAction = async (action: AdaptiveCards.Action) => { // Adaptive Card event handler\n        const preChatResponse = (action as any).data;\n\n        setPreChatResponse(preChatResponse);\n\n        const optionalParams: any = {};\n        if (preChatResponse) {\n          optionalParams.preChatResponse = preChatResponse;\n        }\n\n        dispatch({type: ActionType.SET_LOADING, payload: true});\n\n        try {\n          await chatSDK?.startChat(optionalParams);\n        } catch (error) {\n          console.log(`Unable to start chat: ${error.message}`);\n          return;\n        }\n\n        // Cache current conversation context\n        const liveChatContext = await chatSDK?.getCurrentLiveChatContext();\n        if (liveChatContext && Object.keys(liveChatContext).length) {\n          localStorage.setItem('liveChatContext', JSON.stringify(liveChatContext));\n        }\n\n        chatSDK?.onNewMessage(onNewMessage, {rehydrate: true});\n        chatSDK?.onTypingEvent(onTypingEvent);\n        chatSDK?.onAgentEndSession(onAgentEndSession);\n\n        const chatAdapter = await chatSDK?.createChatAdapter();\n\n        setChatAdapter(chatAdapter);\n        dispatch({type: ActionType.SET_LOADING, payload: false});\n\n        if ((chatSDK as any)?.getVoiceVideoCalling) {\n          const chatToken: any = await chatSDK?.getChatToken();\n          setChatToken(chatToken);\n        }\n    }\n\n    const renderedCard = adaptiveCard.render(); // Renders as HTML element\n    return <div ref={(n) => { // Returns React element\n      n && n.firstChild && n.removeChild(n.firstChild); // Removes duplicates fix\n      renderedCard && n && n.appendChild(renderedCard);\n    }} />\n  }, [chatSDK, preChatSurvey])\n\n  return (\n    <>\n      <div>\n        {\n          !state.hasChatStarted && <ChatButton onClick={startChat} />\n        }\n      </div>\n      {\n        state.hasChatStarted && <div className=\"chat-container\">\n          <ChatHeader\n            title={'Live Chat via Chat SDK'}\n            onClick={endChat}\n          />\n          {\n            preChatSurvey && !preChatResponse && renderPreChatSurvey()\n          }\n          {\n            state.isLoading && <Loading />\n          }\n          {\n            !callingConfig.disable && VoiceVideoCallingSDK && chatToken && <Calling\n              VoiceVideoCallingSDK={VoiceVideoCallingSDK}\n              OCClient={chatSDK?.OCClient}\n              chatToken={chatToken}\n            />\n          }\n          {\n            !state.isLoading && state.hasChatStarted && chatAdapter && webChatStore && activityMiddleware && <ReactWebChat\n              activityMiddleware={activityMiddleware}\n              avatarMiddleware={avatarMiddleware}\n              userID=\"teamsvisitor\"\n              directLine={chatAdapter}\n              sendTypingIndicator={true}\n              store={webChatStore}\n              styleOptions={styleOptions}\n            />\n          }\n          {\n            !state.isLoading && state.hasChatStarted && chatAdapter && <ActionBar\n              onDownloadClick={downloadTranscript}\n              onEmailTranscriptClick={emailTranscript}\n            />\n          }\n        </div>\n      }\n    </>\n  );\n}\n\nexport default WebChat;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport WebChat from './components/WebChat/WebChat';\nimport reportWebVitals from './reportWebVitals';\nimport { StateProvider } from './context';\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider>\n      <WebChat />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}